class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int right = 1,numsLen = nums.length,max = nums[0],index =0
                ,maxIndex = 0;
        int[] windowMax = new int[numsLen - k + 1];
        while (right <= numsLen){
            // 窗口达到 k  计算
            if (right >= k){
                windowMax[index++] = max;
                // 如果最大值此时在移除位置 4 1 -1  5 需要更新最大值
                if (right - maxIndex == k && maxIndex+1 < numsLen){
                    max = nums[++maxIndex];
                    while (maxIndex+1 <= right && maxIndex+1 < numsLen && max < nums[maxIndex+1]){
                        maxIndex++;
                        max = nums[maxIndex];
                    }
                }

            }
            if (right == numsLen){
                break;
            }
            // 计算最大值
            if (max < nums[right]){
                max = nums[right];
                maxIndex = right;
            }
            // 窗口扩大
            right++;

        }
        return windowMax;
    }
}

//total_testcases:61
//total_correct:32
//input_formatted:[9,10,9,-7,-4,-8,2,-6]
5
//expected_output:[10,10,9,2]
//code_output:[10,10,9,-4]
