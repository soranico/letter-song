/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/



class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        Node copyHead = new Node(head.val), copyPre = copyHead, copyCur;
        Node cur = head.next;
        Map<Node, Node> cacheMap = new HashMap<>(16);
        cacheMap.put(head, copyHead);
        copyHead.random = cacheMap.computeIfAbsent(head.random, key->head.random == null ? null : new Node(head.random.val));
        while (cur != null) {
            // 已经构建过复用
            copyCur = cacheMap.getOrDefault(cur, new Node(cur.val));
            Node random = cur.random;
            copyCur.random = cacheMap.computeIfAbsent(random, key->random == null ? null : new Node(random.val));
            cacheMap.put(cur, copyCur);
            copyPre.next = copyCur;
            copyPre = copyCur;
            cur = cur.next;
        }
        return copyHead;
    }
}

//total_testcases:19
//total_correct:13
//input_formatted:[[6,5],[5,null],[3,2],[-1,20],[1,21],[6,21],[5,9],[9,9],[0,5],[-7,4],[-4,22],[-6,null],[-1,null],[-6,null],[-8,18],[-10,null],[-3,2],[2,16],[-8,4],[0,null],[-1,null],[6,13],[-7,2]]
//expected_output:[[6,5],[5,null],[3,2],[-1,20],[1,21],[6,21],[5,9],[9,9],[0,5],[-7,4],[-4,22],[-6,null],[-1,null],[-6,null],[-8,18],[-10,null],[-3,2],[2,16],[-8,4],[0,null],[-1,null],[6,13],[-7,2]]
//code_output:Random pointer of node with val 3 points to a node not in the copied list
