/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {


        for (int i = 0; i < inorder.length; i++) {
            treeNodeIndex.put(inorder[i],i);
        }
        return buildTree(preorder,0,preorder.length,inorder,0);

    }

    private static Map<Integer,Integer> treeNodeIndex=new HashMap<>();

    private static TreeNode buildTree(int[] preorder,int preStart,int preEnd,
                                      int[] inorder,int inStart){
        // 中序指针
        if (/*inStart >= inEnd &&*/ preStart >= preEnd){
            return null;
        }
        // 取出子树的根节点索引
        Integer rootIndex = treeNodeIndex.get(preorder[preStart]);
        // 子树的根节点
        TreeNode root=new TreeNode(inorder[rootIndex]);
        // 子树的左子树节点个数 1 2 3 4 5 6
        int leftChildNum=rootIndex-inStart;
        root.left=buildTree(preorder,preStart+1,preStart+leftChildNum+1,inorder,inStart);

        root.right=buildTree(preorder,preStart+leftChildNum+1,preEnd,inorder,rootIndex+1);
        return root;

    }
}
//runtime:2 ms
//memory:38.3 MB
