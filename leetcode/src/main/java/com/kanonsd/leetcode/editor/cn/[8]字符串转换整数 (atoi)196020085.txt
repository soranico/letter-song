class Solution {
    public int myAtoi(String s) {
        char space = ' ',sign = ' ',add = '+',sub = '-';
        char[] chars = s.toCharArray();
        StringBuilder num = new StringBuilder();
        for (int i = 0; i < chars.length; i++) {
            char cur = chars[i];
            if (cur == space || (cur ==0x30 && num.length() ==0)){
            }else if (sign != space && (cur==add || cur==sub)){
                break;
            }else if (sign == space && (cur ==add || cur ==sub) && num.length()==0){
                sign = cur;
            }else if ((cur<0x30 || cur>0x39) && num.length()>0){
                break;
            } else if ((cur<0x30 || cur>0x39)){
            } else {
                num.append(cur);
            }
        }
        if (num.length()==0) return 0;
        String max = String.valueOf(Integer.MAX_VALUE),min = String.valueOf(Integer.MIN_VALUE);
        if (num.length() < 11){
            return sign==space || sign ==add ?Integer.parseInt(num.toString()):
                    Integer.parseInt(num.insert(0,sub).toString());
        }
        if (sign == sub){
            return min.compareTo(num.toString())>0?Integer.parseInt(num.insert(0,sub).toString())
                    :Integer.MIN_VALUE;
        }

        return max.compareTo(num.toString())>0?Integer.parseInt(num.toString()):Integer.MAX_VALUE;
    }
}

//total_testcases:1082
//total_correct:12
//input_formatted:"words and 987"
//expected_output:0
//code_output:987
